#!/bin/bash
# shellcheck disable=SC2016
set -e -o pipefail

(( BASH_VERSINFO[0] < 4 )) && echo "Bash 4+ required." && exit 1

: "${PAGER:=more}"
: "${EDITOR:=vi}"
: "${HELP_BROWSER:=}"
: "${EXE:="${0##*/}"}"

export NEEDRESTART_SUSPEND=yes
export HOMEBIN="$HOME/.local/bin"

mkdir -p "$HOMEBIN"

declare -A HELP
declare -A CONF

declare black="\e[30m"
declare red="\e[31m"
declare green="\e[32m"
declare yellow="\e[33m"
declare blue="\e[34m"
declare magenta="\e[35m"
declare cyan="\e[36m"
declare white="\e[37m"
declare reset="\e[0m"

HELP[update]='Runs apt-get update and upgrade'

x.update () {
  set -x
  sudo apt-get -y update
  sudo apt-get -y upgrade
  set +x
}

x.base () {
  sudo apt-get -y install \
    vim w3m git pandoc nmap jq figlet cmatrix entr make
}

x.lynx () {
  sudo apt-get -y install lynx
  lynxconfd="$HOME/.config/lynx"
  mkdir -p "$lynxconfd"
  curl -fsSL https://raw.githubusercontent.com/rwxrob/dot/main/lynx/lynx.cfg \
	  -o "$lynxconfd/lynx.cfg"
  curl -fsSL https://raw.githubusercontent.com/rwxrob/dot/main/lynx/lynx.lss \
	  -o "$lynxconfd/lynx.lss"
  for i in lynx duck google bing urlencode; do 
    curl -fsSL "https://raw.githubusercontent.com/rwxrob/dot/main/scripts/$i" \
	  -o "$HOMEBIN/$i"
    chmod +x "$HOMEBIN/$i"
  done
}

x.go () {
  sudo apt-get -y install golang gopls
}

x.python () {
  sudo apt-get -y install python-is-python3
}

x.fishies () {
  sudo apt-get -y install libcurses-perl
  sudo cpan -I Term::Animation
  curl -fsSL https://raw.githubusercontent.com/rwxrob/dot/main/scripts/fishies -o "$HOMEBIN"/fishies
  chmod +x "$HOMEBIN/fishies"
}

x.gh () {
  curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
    sudo dd of=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg

  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | \
    sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null

  sudo apt update
  sudo apt install gh
}

x.bash () {
  curl -fsSL https://raw.githubusercontent.com/rwxrob/dot/main/.bashrc -o "$HOME/.bashrc"
}

x.vim () {
  curl -fsSL https://raw.githubusercontent.com/rwxrob/dot/main/.vimrc -o "$HOME/.vimrc"
}

x.tmux () {
  curl -fsSL https://raw.githubusercontent.com/rwxrob/dot/main/tmux/.tmux.conf -o "$HOME/.tmux.conf"
}

x.scripts () {
  curl -fsSL https://raw.githubusercontent.com/rwxrob/dot/main/scripts/blankpane \
	  -o "$HOMEBIN/blankpane"
  chmod +x "$HOMEBIN/blankpane"
}

x.all () {
  x.update
  x.base
  x.fishies
  x.python
  x.go
  x.gh
  x.bash
  x.vim
  x.tmux
  x.scripts
  x.lynx
}

############################## BOILERPLATE ###########################
## Everything from here to the end of file can be snipped and updated
## with latest from https://github.com/rwxrob/template-bash-command.

# ------------------------------- usage ------------------------------

HELP[usage]='

```
'"$EXE"' usage
```

Display all possible commands. Note that this is usually easier by
simply using tab completion instead.'

x.usage() {
  local -a cmds
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:1} =~ _ ]] && continue
    cmds+=("$c")
  done
  local IFS='|'
  printf "usage: %s (%s)\n" "$EXE" "${cmds[*]}"
}

# ------------------------------- help -------------------------------

HELP[help]='

```
'"$EXE"' help [COMMAND]
```

Displays specific help information. If no argument is passed displays
general help information (main). Otherwise, the documentation for the
specific argument keyword is displayed, which usually corresponds to
a COMMAND name (but not necessarily). All documentation is written in
GitHub Flavored Markdown and will displayed as a web page if `pandoc`
and `$HELP_BROWSER` are detected, otherwise, just the Markdown is sent
to `$PAGER` (default: more).

Also see `readme` and `usage` commands.
'

x.help() { 
  local name="${1:-main}" title body file
  title=$(_help_title "$name") || true
  if [[ -z "$title" ]]; then
    title="$EXE $name"
    [[ $name == main ]] && title="$EXE"
  fi
  if [[ $name == main ]]; then
    body=$(x.readme)
    body=${body#*$title}
  else
    body="${HELP[$name]}"
  fi
  file="/tmp/help-$EXE-$name.html"
  if _have pandoc ; then
    if _have "$HELP_BROWSER" && [[ -t 1 ]] ;then
      pandoc -f gfm -s --metadata title="$title" \
        -o "$file" <<< "$body"
      [[ -z "$2" ]] && cd /tmp && exec "$HELP_BROWSER" "$file"
      return 0
    fi
    pandoc -f gfm -s --metadata title="$title" \
      -t plain <<< "$body" | "$PAGER"
    return 0
  fi
  echo -e "$title\n\n$body" | "$PAGER"
}

_help_title() {
  _filter "$@" && return $?;
  local name="$1"
  while IFS= read -r line; do
    [[ $line =~ ^[:space]*$ ]] && continue
    [[ $line =~ ^#\ (.+) ]] && echo "${BASH_REMATCH[1]}" && return 0
    return 1
  done <<< "${HELP[$name]}"
}

# ------------------------------ readme ------------------------------

HELP[readme]='
## Generate `README.md` File

```
'"$EXE"' readme > README.md
```

The `readme` command will output the embedded help documentation in raw
GitHub Flavored Markdown suitable for use as a `README.md` file on
GitHub or similar hosting service.'

x.readme() {
  _trim "${HELP[main]}"
  echo
  while IFS= read -r name; do
    [[ $name = main ]] && continue
    body=$(_trim "${HELP[$name]}")
    [[ $body =~ ^\# ]] || body="## The \`$name\` Command"$'\n\n'$body
    printf "%s\n\n" "$body"
  done < <(printf "%s\n" "${!HELP[@]}" | LC_COLLATE=C sort)
  echo -e "----\n\n*Autogenerated $(date)*\n"
}

# ----------------------------- utilities ----------------------------

_jsonstr() {
  _checkdep jq || return $?
  _buffer "$@" && return $?
  jq -MRsc <<< "$1"
}

_urlencode() {
  _buffer "$@" && return $?
  local string="$1"
  local strlen=${#string}
  local encoded=""
  local pos c o
  for ((pos = 0; pos < strlen; pos++)); do
    c=${string:$pos:1}
    case "$c" in
    [-_.~a-zA-Z0-9]) o="$c" ;;
    *) printf -v o '%%%02x' "'$c'" ;;
    esac
    encoded+="$o"
  done
  echo "$encoded"
}

_reduce() {
  local -n name="${1:?"name of array required"}"
  while IFS= read -r key; do
    [[ $key =~ $2 ]] && echo "$key"
  done < <(printf "%s\n" "${name[@]}")
}

_newest() {
  IFS=$'\n'
  mapfile -t f < <(ls -1 --color=never -trd "${1:-.}"/* 2>/dev/null)
  [[ ${#f} > 0 ]] && echo "${f[-1]}"
}

_trim() {
  local it="${1#"${1%%[![:space:]]*}"}"
  echo -e "${it%"${it##*[![:space:]]}"}"
}

_join() { local IFS="$1"; shift; echo "$*"; }

_have(){ type "$1" &>/dev/null; }

_checkdep() {
  _have "$1" && return 0
  echo "'$EXE' depends on '$1' for this, but not found"
  return 1
}

_filter(){
  [[ -n "$1" ]] && return 1
  while IFS= read -ra args; do
    "${FUNCNAME[1]}" "${args[@]}"
  done
}

_buffer() {
  [[ -n "$1" ]] && return 1
  "${FUNCNAME[1]}" "$(</dev/stdin)"
}

_prompt() {
  local key="$1" def="$2" regx="$3" value first=yes
  shift 3
  local text="${*:-Enter value for %s [%s]: }"
  [[ -z "$key" ]] && echo "Missing prompt key" >&2 && return 1
  [[ -z "$regx" ]] && echo "Missing valid regx" >&2 && return 1
  while [[ ! $value =~ $regx ]];do
    printf "$text" "$key" "$def" >&2
    IFS= read -r value
    [[ -z "$value" ]] && value="$def"
    [[ $value =~ ^\ +$ ]] && value=""
    [[ -n "$first" ]] && unset first && continue
    echo "Must match /$regx/" >&2
  done
  _trim "$value"
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

_have _initialize && _initialize "$@"

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "x.$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    declare cmd=$(command -v "x.$c")
    if [[ $c == "$CMD" && -n "$cmd" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

if _have _alternatives; then
  _alternatives "$@" 
  exit $?
fi

x.usage "$@"
